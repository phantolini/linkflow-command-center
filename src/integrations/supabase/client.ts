// This file is automatically generated. Do not edit it directly.
// Mini-app version - no direct Supabase dependencies

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Mock Supabase client for mini-app compatibility
export const supabase = {
  auth: {
    signUp: async (credentials: any) => {
      console.log('Mock signUp called:', credentials);
      return { data: { user: null }, error: null };
    },
    signInWithPassword: async (credentials: any) => {
      console.log('Mock signInWithPassword called:', credentials);
      return { data: { user: null }, error: null };
    },
    signInWithOAuth: async (options: any) => {
      console.log('Mock OAuth sign in called:', options);
      return { data: { user: null }, error: null };
    },
    signOut: async () => {
      console.log('Mock signOut called');
      return { error: null };
    },
    onAuthStateChange: (callback: (event: string, session: any) => void) => {
      console.log('Mock onAuthStateChange called');
      return { data: { subscription: { unsubscribe: () => {} } } };
    },
    getUser: async () => {
      console.log('Mock getUser called');
      return { data: { user: null }, error: null };
    }
  },
  storage: {
    from: (bucket: string) => ({
      upload: async (path: string, file: File, options?: any) => {
        console.log('Mock storage upload called:', path, file, options);
        return { data: null, error: null };
      },
      getPublicUrl: (path: string) => ({
        data: { publicUrl: URL.createObjectURL(new Blob()) }
      })
    })
  },
  from: (table: string) => ({
    select: (columns?: string) => ({
      eq: (column: string, value: any) => ({
        order: (column: string, options?: any) => 
          Promise.resolve({
            data: [],
            error: null
          })
      }),
      order: (column: string, options?: any) => 
        Promise.resolve({
          data: [],
          error: null
        })
    }),
    insert: (data: any) => ({
      select: () => ({
        single: () => 
          Promise.resolve({
            data: { id: Date.now().toString(), ...data },
            error: null
          })
      })
    }),
    update: (data: any) => ({
      eq: (column: string, value: any) => ({
        select: () => ({
          single: () => 
            Promise.resolve({
              data: { ...data },
              error: null
            })
        })
      })
    }),
    delete: () => ({
      eq: (column: string, value: any) => 
        Promise.resolve({
          error: null
        })
    })
  })
};

// Export types for compatibility
export type Database = any;
